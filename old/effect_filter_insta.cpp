#include <highgui.h>
#include "effect_filter_insta.h"
#include "filter_utils.h"
#include "ul_log.h"

namespace cngram
{
/*------------- Filter 01 -------------*/
EffectFilter01::EffectFilter01() : BaseEffectFilter("X-Pro II", "1.0")
{
	image_border = cvLoadImage(kBorderImagePath);
	image_circle0 = cvLoadImage(kCircleImagePath0);
	image_circle1 = cvLoadImage(kCircleImagePath1);
}
EffectFilter01::~EffectFilter01()
{
	cvReleaseImage(&image_border);
	cvReleaseImage(&image_circle0);
	cvReleaseImage(&image_circle1);
}
FilterErrorCode EffectFilter01::Initialize()
{
	return ERROR_OK;
}

FilterErrorCode EffectFilter01::MakeEffect(
		const IplImage * input_image,
		IplImage * &output_image)
{
	output_image = cvCloneImage(input_image);
	for (int i = 0; i < output_image->height; i++)
	{
		for (int j = 0; j < output_image->width; j++)
		{
			CvScalar s = cvGet2D(output_image, i, j);

			// Color Map
			for (int k = 0; k < 3; k++)
			{
				s.val[k] = kRGBMap[k][int(s.val[k])];
			}

			// Circle
			CvScalar y1 = cvGet2D(image_circle1, i, j);
			s = FilterUtils::Overlay(s, y1, 0.6);

			// border
			CvScalar z = cvGet2D(image_border, i, j);
			s = FilterUtils::Multiply(s, z);

			cvSet2D(output_image, i, j, s);
		}
	}
	return ERROR_OK;
}

const uint8_t EffectFilter01::kRGBMap[][256] = 
{
	{25,25,26,26,27,27,28,28,29,30,30,31,31,32,32,33,34,34,35,35,36,36,37,37,38,39,39,40,40,41,41,42,43,43,44,45,46,46,47,48,49,49,50,51,52,52,53,54,55,55,56,57,58,58,59,60,61,61,62,63,64,64,65,66,67,67,68,69,70,70,71,72,73,73,74,75,76,76,77,78,79,79,80,81,82,83,83,84,85,86,87,87,88,89,90,91,92,92,93,94,95,96,96,97,98,99,100,100,101,102,103,104,105,105,106,107,108,109,109,110,111,112,113,113,114,115,116,117,118,118,119,120,121,122,122,123,124,125,126,126,127,128,129,130,131,131,132,133,134,135,136,137,138,138,139,140,141,142,143,144,145,145,146,147,148,149,149,150,151,152,153,153,154,155,156,157,158,158,159,160,161,162,163,164,165,165,166,167,168,169,170,171,172,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,187,188,189,190,191,191,192,193,194,195,195,196,197,198,199,200,200,201,202,203,204,205,206,207,207,208,209,210,211,212,213,214,214,215,216,217,218,218,219,220,221,222,222,223,224,225,226},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,5,5,6,6,7,7,8,9,9,10,10,11,11,12,13,13,14,15,16,17,18,19,20,20,21,22,23,24,25,26,27,28,29,30,32,33,34,36,37,38,40,41,42,44,45,46,48,49,51,52,54,56,57,59,61,62,64,65,67,69,70,72,74,75,77,79,81,83,85,87,89,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,121,123,125,127,129,131,133,135,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,171,172,174,176,178,180,181,183,185,187,189,190,192,194,196,198,200,201,203,204,206,207,209,210,212,213,215,216,218,219,221,222,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,241,241,242,242,243,243,244,244,245,245,246,246,247,247,248,248,249,249,249,249,250,250,250,250,251,251,251,251,252,252,252,252,253,253,253,253,253,253,253,253,254,254,254,254,254,254,254,254},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,5,5,6,6,7,7,8,9,9,10,10,11,11,12,13,13,14,15,16,17,18,19,20,20,21,22,23,24,25,26,27,28,29,30,32,33,34,36,37,38,40,41,42,44,45,46,48,49,51,52,54,56,57,59,61,62,64,65,67,69,70,72,74,75,77,79,81,83,85,87,89,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,121,123,125,127,129,131,133,135,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,171,172,174,176,178,180,181,183,185,187,189,190,192,194,196,198,200,201,203,204,206,207,209,210,212,213,215,216,218,219,221,222,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,241,241,242,242,243,243,244,244,245,245,246,246,247,247,248,248,249,249,249,249,250,250,250,250,251,251,251,251,252,252,252,252,253,253,253,253,253,253,253,253,254,254,254,254,254,254,254,254}
};

const char * EffectFilter01::kCircleImagePath1 = "data/circle01_1.png";
const char * EffectFilter01::kCircleImagePath0 = "data/circle01_0.png";
const char * EffectFilter01::kBorderImagePath = "data/border01.png";

/*------------- Filter 02 -------------*/
EffectFilter02::EffectFilter02() : BaseEffectFilter("Lomo", "1.0")
{
	image_border0 = cvLoadImage(kBorderImagePath0);
	image_border1 = cvLoadImage(kBorderImagePath1);
	image_circle0 = cvLoadImage(kCircleImagePath0);
	image_circle1 = cvLoadImage(kCircleImagePath1);
}

EffectFilter02::~EffectFilter02() 
{
	cvReleaseImage(&image_border0);
	cvReleaseImage(&image_border1);
	cvReleaseImage(&image_circle0);
	cvReleaseImage(&image_circle1);
}

FilterErrorCode EffectFilter02::Initialize()
{
	return ERROR_OK;
}

FilterErrorCode EffectFilter02::MakeEffect(
		const IplImage * input_image,
		IplImage * &output_image)
{
	output_image = cvCloneImage(input_image);
	for (int i = 0; i < output_image->height; i++)
	{
		for (int j = 0; j < output_image->width; j++)
		{
			CvScalar s = cvGet2D(output_image, i, j);

			// Color Map
			for (int k = 0; k < 3; k++)
			{
				s.val[k] = kRGBMap[k][int(s.val[k])];
			}

			// Circle
			CvScalar y1 = cvGet2D(image_circle1, i, j);
			s = FilterUtils::Overlay(s, y1, 1.25);
			CvScalar y0 = cvGet2D(image_circle0, i, j);
			s = FilterUtils::Multiply(s, y0, 0.2);

			// border
			CvScalar z = cvGet2D(image_border1, i, j);
			if (z.val[0] < 128 && z.val[1] < 128 && z.val[2] < 128)
			{
				s = s;
			}
			else
			{
				s = cvGet2D(image_border0, i, j);
			}

			cvSet2D(output_image, i, j, s);
		}
	}
	return ERROR_OK;
}

const uint8_t EffectFilter02::kRGBMap[][256] = 
{
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,2,3,3,3,4,4,4,5,5,6,6,7,8,9,10,10,11,12,13,14,14,15,16,17,18,19,20,21,22,24,25,26,27,29,30,31,32,34,35,36,37,39,40,42,43,45,47,48,50,52,53,55,56,58,60,61,63,65,67,69,71,73,75,78,80,82,84,86,89,91,93,95,97,100,102,105,107,110,113,115,118,121,123,126,128,131,134,136,139,142,145,148,151,154,157,160,163,166,169,172,175,178,181,184,187,191,193,196,199,201,204,207,209,212,215,217,220,223,225,228,231,234,234,234,234,235,235,235,236,236,236,237,237,237,238,238,238,239,239,239,239,240,240,240,241,241,241,242,242,242,243,243,243,244,244,244,244,244,244,245,245,245,245,245,246,246,246,246,246,247,247,247,247,247,247,248,248,248,248,248,249,249,249,249,249,250,250,250,250,250,250,250,250,251,251,251,251,251,251,251,251,252,252,252,252,252,252,252,252,253,253,253,253,253,253,253,253,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,2,3,3,3,4,4,4,5,5,6,6,7,8,9,10,10,11,12,13,14,14,15,16,17,18,19,20,21,22,24,25,26,27,29,30,31,32,34,35,36,37,39,40,42,43,45,47,48,50,52,53,55,56,58,60,61,63,65,67,69,71,73,75,78,80,82,84,86,89,91,93,95,97,100,102,105,107,110,113,115,118,121,123,126,128,131,134,136,139,142,145,148,151,154,157,160,163,166,169,172,175,178,181,184,187,191,193,196,199,201,204,207,209,212,215,217,220,223,225,228,231,234,234,234,234,235,235,235,236,236,236,237,237,237,238,238,238,239,239,239,239,240,240,240,241,241,241,242,242,242,243,243,243,244,244,244,244,244,244,245,245,245,245,245,246,246,246,246,246,247,247,247,247,247,247,248,248,248,248,248,249,249,249,249,249,250,250,250,250,250,250,250,250,251,251,251,251,251,251,251,251,252,252,252,252,252,252,252,252,253,253,253,253,253,253,253,253,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,2,3,3,3,4,4,4,5,5,6,6,7,8,9,10,10,11,12,13,14,14,15,16,17,18,19,20,21,22,24,25,26,27,29,30,31,32,34,35,36,37,39,40,42,43,45,47,48,50,52,53,55,56,58,60,61,63,65,67,69,71,73,75,78,80,82,84,86,89,91,93,95,97,100,102,105,107,110,113,115,118,121,123,126,128,131,134,136,139,142,145,148,151,154,157,160,163,166,169,172,175,178,181,184,187,191,193,196,199,201,204,207,209,212,215,217,220,223,225,228,231,234,234,234,234,235,235,235,236,236,236,237,237,237,238,238,238,239,239,239,239,240,240,240,241,241,241,242,242,242,243,243,243,244,244,244,244,244,244,245,245,245,245,245,246,246,246,246,246,247,247,247,247,247,247,248,248,248,248,248,249,249,249,249,249,250,250,250,250,250,250,250,250,251,251,251,251,251,251,251,251,252,252,252,252,252,252,252,252,253,253,253,253,253,253,253,253,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254}
};

const char * EffectFilter02::kCircleImagePath1 = "data/circle02_1.png";
const char * EffectFilter02::kCircleImagePath0 = "data/circle02_0.png";
const char * EffectFilter02::kBorderImagePath1 = "data/border02_1.png";
const char * EffectFilter02::kBorderImagePath0 = "data/border02_0.png";

/*------------- Filter 03 -------------*/
EffectFilter03::EffectFilter03() : BaseEffectFilter("EarlyBird", "1.0")
{
	image_border = cvLoadImage(kBorderImagePath);
	image_circle0 = cvLoadImage(kCircleImagePath0);
	image_circle1 = cvLoadImage(kCircleImagePath1);
}

EffectFilter03::~EffectFilter03()
{
	cvReleaseImage(&image_border);
	cvReleaseImage(&image_circle0);
	cvReleaseImage(&image_circle1);
}

FilterErrorCode EffectFilter03::Initialize()
{
	return ERROR_OK;
}

FilterErrorCode EffectFilter03::MakeEffect(
		const IplImage * input_image,
		IplImage * &output_image)
{
	output_image = cvCloneImage(input_image);
	for (int i = 0; i < output_image->height; i++)
	{
		for (int j = 0; j < output_image->width; j++)
		{
			CvScalar s = cvGet2D(output_image, i, j);

			// Color Map
			for (int k = 0; k < 3; k++)
			{
				s.val[k] = kRGBMap[k][int(s.val[k])];
			}

			// Circle
			CvScalar y1 = cvGet2D(image_circle1, i, j);
			s = FilterUtils::Overlay(s, y1, 1);
			CvScalar y0 = cvGet2D(image_circle0, i, j);
			s = FilterUtils::Multiply(s, y0, 0.4);

			// border
			CvScalar z = cvGet2D(image_border, i, j);
			s = FilterUtils::Lighten(s, z);

			cvSet2D(output_image, i, j, s);
		}
	}
	return ERROR_OK;
}

const uint8_t EffectFilter03::kRGBMap[][256] = 
{
	{12,12,13,14,14,15,16,16,17,18,18,19,20,20,21,22,23,24,26,28,30,31,33,35,37,38,40,42,44,45,47,49,51,52,53,54,56,57,58,59,61,62,63,64,66,67,68,69,71,71,72,73,74,74,75,76,77,77,78,79,80,80,81,82,83,83,84,85,85,86,87,87,88,89,89,90,91,91,92,93,94,94,95,95,96,96,97,97,98,99,99,100,100,101,101,102,103,103,105,106,107,108,110,111,112,113,114,116,117,118,119,120,122,123,125,126,128,129,131,132,134,135,137,138,140,141,143,144,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,180,180,181,182,183,184,184,185,186,187,188,188,189,190,191,192,193,193,194,194,195,196,196,197,198,198,199,199,200,201,201,202,203,203,203,203,205,205,206,206,207,207,208,208,209,209,210,210,211,211,212,213,213,214,215,215,216,217,217,218,219,219,220,221,222,222,223,224,225,226,226,227,228,229,230,230,231,232,233,234,235,235,236,237,237,238,239,239,240,241,241,242,243,243,244,245},
	{0,0,0,0,0,0,1,1,1,1,1,2,2,2,2,2,3,4,5,6,7,8,10,11,12,13,14,16,17,18,19,20,22,23,24,26,27,29,30,32,33,34,36,37,39,40,42,43,45,46,47,48,49,50,51,52,54,55,56,57,58,59,60,61,63,64,65,66,68,69,70,71,73,74,75,76,78,79,80,81,83,84,85,86,88,89,90,91,93,94,95,96,98,99,100,101,103,103,106,108,110,111,113,115,117,118,120,122,124,125,127,129,131,132,134,136,137,139,141,142,144,146,147,149,151,152,154,156,158,159,160,161,162,163,164,165,167,168,169,170,171,172,173,174,176,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,191,192,193,193,194,195,195,196,197,197,198,199,199,200,201,202,202,203,203,203,203,205,205,206,206,207,207,208,208,209,209,210,210,211,211,212,212,213,213,214,214,215,215,216,216,217,217,218,218,219,219,220,220,221,221,222,223,223,224,224,225,225,226,227,227,228,229,229,230,231,231,232,233,233,234,235,235,236,237,238,238,239,240,240,241,242,242,243,244,244,245,246,246,247,248},
	{18,19,21,23,25,26,28,30,32,33,35,37,39,40,42,44,46,47,48,50,51,52,54,55,57,58,59,61,62,63,65,66,68,69,70,71,73,74,75,76,78,79,80,81,83,84,85,86,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,103,105,106,107,108,109,111,112,113,114,115,117,118,119,120,121,123,124,125,126,127,128,130,131,132,133,134,136,137,138,139,140,142,143,145,147,149,151,152,154,156,158,160,161,163,165,167,169,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,188,188,189,190,191,192,193,194,195,195,196,197,198,199,200,201,202,202,203,203,205,206,206,207,208,209,210,210,211,212,213,214,215,215,215,216,216,217,217,218,218,218,219,219,220,220,221,221,222,222,222,223,223,223,224,224,225,225,225,226,226,226,227,227,228,228,228,229,229,229,230,230,231,231,231,232,232,232,233,233,234,234,235,235,236,236,237,237,238,238,239,239,240,240,241,241,242,242,242,243,243,244,244,245,245,245,246,246,247,247,248,248,249,249,249,250,250,250,251,251,252,252,252,253,253,253,254,254}
};

const char * EffectFilter03::kCircleImagePath1 = "data/circle03_1.png";
const char * EffectFilter03::kCircleImagePath0 = "data/circle03_0.png";
const char * EffectFilter03::kBorderImagePath = "data/border03.png";

/*------------- Filter 04 -------------*/
EffectFilter04::EffectFilter04() : BaseEffectFilter("Sutro", "1.0")
{
	image_border = cvLoadImage(kBorderImagePath);
	image_grain0 = cvLoadImage(kGrainImagePath0);
	image_grain1 = cvLoadImage(kGrainImagePath1);
	image_circle0 = cvLoadImage(kCircleImagePath0);
	image_circle1 = cvLoadImage(kCircleImagePath1);
}

EffectFilter04::~EffectFilter04()
{
	cvReleaseImage(&image_border);
	cvReleaseImage(&image_grain0);
	cvReleaseImage(&image_grain1);
	cvReleaseImage(&image_circle0);
	cvReleaseImage(&image_circle1);
}

FilterErrorCode EffectFilter04::Initialize()
{
	return ERROR_OK;
}

FilterErrorCode EffectFilter04::MakeEffect(
		const IplImage * input_image,
		IplImage * &output_image)
{
	output_image = cvCloneImage(input_image);
	for (int i = 0; i < output_image->height; i++)
	{
		for (int j = 0; j < output_image->width; j++)
		{
			CvScalar s = cvGet2D(output_image, i, j);

			// Color Map
			for (int k = 0; k < 3; k++)
			{
				s.val[k] = kRGBMap[k][int(s.val[k])];
			}

			// Grain
			CvScalar x0 = cvGet2D(image_grain0, i, j);
			s = FilterUtils::LinearDodge(s, x0, 1);
			s = FilterUtils::LinearDodge(s, x0, 1);
			CvScalar x1 = cvGet2D(image_grain1, i, j);
			s = FilterUtils::Overlay(s, x1, 0.8);

			// Circle
			CvScalar y1 = cvGet2D(image_circle1, i, j);
			s = FilterUtils::Overlay(s, y1, 1);
			CvScalar y0 = cvGet2D(image_circle0, i, j);
			s = FilterUtils::Multiply(s, y0, 0.6);

			// border
			CvScalar z = cvGet2D(image_border, i, j);
			s = FilterUtils::Multiply(s, z);

			cvSet2D(output_image, i, j, s);
		}
	}
	return ERROR_OK;
}

const uint8_t EffectFilter04::kRGBMap[][256] = 
{
	{12,12,13,14,14,15,16,16,17,18,18,19,20,20,21,22,23,24,26,28,30,31,33,35,37,38,40,42,44,45,47,49,51,52,53,54,56,57,58,59,61,62,63,64,66,67,68,69,71,71,72,73,74,74,75,76,77,77,78,79,80,80,81,82,83,83,84,85,85,86,87,87,88,89,89,90,91,91,92,93,94,94,95,95,96,96,97,97,98,99,99,100,100,101,101,102,103,104,105,106,107,108,110,111,112,113,114,116,117,118,119,120,122,123,125,126,128,129,131,132,134,135,137,138,140,141,143,144,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,180,180,181,182,183,184,184,185,186,187,188,188,189,190,191,192,193,193,194,194,195,196,196,197,198,198,199,199,200,201,201,202,203,203,204,204,205,205,206,206,207,207,208,208,209,209,210,210,211,211,212,213,213,214,215,215,216,217,217,218,219,219,220,221,222,222,223,224,225,226,226,227,228,229,230,230,231,232,233,234,235,235,236,237,237,238,239,239,240,241,241,242,243,243,244,245},
	{0,0,0,0,0,0,1,1,1,1,1,2,2,2,2,2,3,4,5,6,7,8,10,11,12,13,14,16,17,18,19,20,22,23,24,26,27,29,30,32,33,34,36,37,39,40,42,43,45,46,47,48,49,50,51,52,54,55,56,57,58,59,60,61,63,64,65,66,68,69,70,71,73,74,75,76,78,79,80,81,83,84,85,86,88,89,90,91,93,94,95,96,98,99,100,101,103,104,106,108,110,111,113,115,117,118,120,122,124,125,127,129,131,132,134,136,137,139,141,142,144,146,147,149,151,152,154,156,158,159,160,161,162,163,164,165,167,168,169,170,171,172,173,174,176,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,191,192,193,193,194,195,195,196,197,197,198,199,199,200,201,202,202,203,203,204,204,205,205,206,206,207,207,208,208,209,209,210,210,211,211,212,212,213,213,214,214,215,215,216,216,217,217,218,218,219,219,220,220,221,221,222,223,223,224,224,225,225,226,227,227,228,229,229,230,231,231,232,233,233,234,235,235,236,237,238,238,239,240,240,241,242,242,243,244,244,245,246,246,247,248},
	{18,19,21,23,25,26,28,30,32,33,35,37,39,40,42,44,46,47,48,50,51,52,54,55,57,58,59,61,62,63,65,66,68,69,70,71,73,74,75,76,78,79,80,81,83,84,85,86,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,111,112,113,114,115,117,118,119,120,121,123,124,125,126,127,128,130,131,132,133,134,136,137,138,139,140,142,143,145,147,149,151,152,154,156,158,160,161,163,165,167,169,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,188,188,189,190,191,192,193,194,195,195,196,197,198,199,200,201,202,202,203,204,205,206,206,207,208,209,210,210,211,212,213,214,215,215,215,216,216,217,217,218,218,218,219,219,220,220,221,221,222,222,222,223,223,223,224,224,225,225,225,226,226,226,227,227,228,228,228,229,229,229,230,230,231,231,231,232,232,232,233,233,234,234,235,235,236,236,237,237,238,238,239,239,240,240,241,241,242,242,242,243,243,244,244,245,245,245,246,246,247,247,248,248,249,249,249,250,250,250,251,251,252,252,252,253,253,253,254,254}
};

const char * EffectFilter04::kCircleImagePath1 = "data/circle04_1.png";
const char * EffectFilter04::kCircleImagePath0 = "data/circle04_0.png";
const char * EffectFilter04::kBorderImagePath = "data/border04.png";
const char * EffectFilter04::kGrainImagePath0 = "data/grain04_0.png";
const char * EffectFilter04::kGrainImagePath1 = "data/grain04_1.png";

/*------------- Filter 05 -------------*/
EffectFilter05::EffectFilter05() : BaseEffectFilter("Toaster", "1.0")
{
	image_border = cvLoadImage(kBorderImagePath);
	image_grain = cvLoadImage(kGrainImagePath);
	image_circle0 = cvLoadImage(kCircleImagePath0);
	image_circle1 = cvLoadImage(kCircleImagePath1);
}

EffectFilter05::~EffectFilter05()
{
	cvReleaseImage(&image_border);
	cvReleaseImage(&image_grain);
	cvReleaseImage(&image_circle0);
	cvReleaseImage(&image_circle1);
}

FilterErrorCode EffectFilter05::Initialize()
{
	return ERROR_OK;
}

FilterErrorCode EffectFilter05::MakeEffect(
		const IplImage * input_image,
		IplImage * &output_image)
{
	output_image = cvCloneImage(input_image);
	for (int i = 0; i < output_image->height; i++)
	{
		for (int j = 0; j < output_image->width; j++)
		{
			CvScalar s = cvGet2D(output_image, i, j);

			// Color Map
			for (int k = 0; k < 3; k++)
			{
				s.val[k] = kRGBMap[k][int(s.val[k])];
			}

			// Grain
			CvScalar x = cvGet2D(image_grain, i, j);
			s = FilterUtils::Overlay(s, x, 0.4);

			// Circle
			CvScalar y1 = cvGet2D(image_circle1, i, j);
			s = FilterUtils::Overlay(s, y1, 1);
			//s = FilterUtils::Overlay(s, y1, 1);
			CvScalar y0 = cvGet2D(image_circle0, i, j);
			s = FilterUtils::Multiply(s, y0, 0.4);

			// border
			CvScalar z = cvGet2D(image_border, i, j);
			s = FilterUtils::Lighten(s, z);

			cvSet2D(output_image, i, j, s);
		}
	}
	return ERROR_OK;
}

const uint8_t EffectFilter05::kRGBMap[][256] = 
{
	{62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,63,64,64,65,66,66,67,68,68,69,70,70,71,72,73,74,75,76,78,79,80,82,83,84,86,87,88,90,91,92,94,95,96,97,98,99,100,101,103,104,105,106,107,108,109,110,112,113,114,116,117,118,120,121,123,124,125,127,128,129,131,132,134,135,136,137,139,140,141,143,144,145,147,148,149,151,152,153,155,156,157,158,159,160,161,162,164,165,166,167,168,169,170,171,173,173,174,174,175,176,176,177,178,178,179,179,180,181,181,182,183,183,184,184,185,185,186,186,187,188,188,189,189,190,190,191,192,192,193,193,194,194,195,195,196,196,197,197,198,198,199,199,200,200,200,201,201,201,202,202,203,203,203,204,204,204,205,205,206,206,206,207,207,207,208,208,209,209,209,210,210,210,211,211,212,212,212,213,213,213,214,214,215,215,215,216,216,216,217,217},
	{1,1,2,2,3,4,4,5,6,6,7,7,8,9,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,28,29,30,31,32,33,35,36,37,38,39,41,42,43,44,45,47,48,49,51,52,53,55,56,58,59,60,62,63,64,66,67,69,70,72,73,75,76,78,79,81,83,84,86,87,89,90,92,94,95,97,99,101,102,104,106,108,109,111,113,115,116,118,120,122,123,124,126,127,129,130,132,133,134,136,137,139,140,142,143,145,146,148,150,151,153,155,156,158,160,161,163,165,166,168,170,172,173,175,176,178,179,181,182,184,185,187,188,190,191,193,194,196,196,197,198,198,199,200,200,201,202,202,203,204,204,205,206,207,207,208,208,209,210,210,211,212,212,213,213,214,215,215,216,217,217,218,218,219,220,220,221,222,222,223,223,224,225,225,226,227,227,228,228,229,229,230,230,231,231,232,232,233,233,234,234,235,235,235,236,236,237,237,238,238,238,239,239,240,240,241,241,242,242,242,242,243,243,243,244,244,244,245,245,245,246,246,246,247,247,248,248,249,249,250,250,251,251,252,252,253,253,254,254},
	{104,104,105,105,106,106,107,107,108,109,109,110,110,111,111,112,113,113,114,115,115,116,117,117,118,119,119,120,121,121,122,123,124,124,125,126,127,127,128,129,130,130,131,132,133,133,134,135,136,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,168,169,170,171,172,173,174,175,177,178,179,180,181,182,183,184,186,186,187,188,189,190,190,191,192,193,194,194,195,196,197,198,199,199,200,200,201,201,202,202,203,204,204,205,205,206,206,207,208,208,209,209,210,210,211,211,212,212,213,213,214,214,215,215,216,216,216,217,217,218,218,219,219,219,220,220,221,221,222,222,223,223,223,224,224,225,225,226,226,226,227,227,228,228,229,229,230,230,230,231,231,231,232,232,233,233,233,234,234,234,235,235,236,236,236,237,237,237,238,238,239,239,239,240,240,240,241,241,242,242,242,242,243,243,243,243,244,244,244,244,245,245,245,245,246,246,246,246,247,247,247,247,248,248,248,248,249,249,249,249,250,250,250,250,251,251,251,252,252,252,253,253,253,254,254,254}
};

const char * EffectFilter05::kCircleImagePath1 = "data/circle05_1.png";
const char * EffectFilter05::kCircleImagePath0 = "data/circle05_0.png";
const char * EffectFilter05::kBorderImagePath = "data/border05.png";
const char * EffectFilter05::kGrainImagePath = "data/grain05.png";

/*------------- Filter 06 -------------*/
EffectFilter06::EffectFilter06()
{
	image_border = cvLoadImage(kBorderImagePath);
}

EffectFilter06::~EffectFilter06()
{
	cvReleaseImage(&image_border);
}

FilterErrorCode EffectFilter06::Initialize()
{
	return ERROR_OK;
}

FilterErrorCode EffectFilter06::MakeEffect(
		const IplImage * input_image,
		IplImage * &output_image)
{
	output_image = cvCloneImage(input_image);
	for (int i = 0; i < output_image->height; i++)
	{
		for (int j = 0; j < output_image->width; j++)
		{
			CvScalar s = cvGet2D(output_image, i, j);

			// Color Map
			for (int k = 0; k < 3; k++)
			{
				s.val[k] = s.val[2];
			}

			// border
			CvScalar z = cvGet2D(image_border, i, j);
			s = FilterUtils::Lighten(s, z);

			cvSet2D(output_image, i, j, s);
		}
	}
	return ERROR_OK;
}

const char * EffectFilter06::kBorderImagePath = "data/border06.png";

/*------------- Filter 07 -------------*/
EffectFilter07::EffectFilter07() : BaseEffectFilter("Walden", "1.0")
{
	image_border = cvLoadImage(kBorderImagePath);
	image_grain = cvLoadImage(kGrainImagePath);
	image_circle0 = cvLoadImage(kCircleImagePath0);
	image_circle1 = cvLoadImage(kCircleImagePath1);
}

EffectFilter07::~EffectFilter07()
{
	cvReleaseImage(&image_border);
	cvReleaseImage(&image_grain);
	cvReleaseImage(&image_circle0);
	cvReleaseImage(&image_circle1);

}
FilterErrorCode EffectFilter07::Initialize()
{
	return ERROR_OK;
}

FilterErrorCode EffectFilter07::MakeEffect(
		const IplImage * input_image,
		IplImage * &output_image)
{
	output_image = cvCloneImage(input_image);
	for (int i = 0; i < output_image->height; i++)
	{
		for (int j = 0; j < output_image->width; j++)
		{
			CvScalar s = cvGet2D(output_image, i, j);

			// Color Map
			for (int k = 0; k < 3; k++)
			{
				s.val[k] = kRGBMap[k][int(s.val[k])];
			}

			// Grain
			CvScalar x = cvGet2D(image_grain, i, j);
			s = FilterUtils::Overlay(s, x, 0.2);

			// Circle
			CvScalar y1 = cvGet2D(image_circle1, i, j);
			s = FilterUtils::Overlay(s, y1, 1, 4);
			s = FilterUtils::Overlay(s, y1, 1);
			CvScalar y0 = cvGet2D(image_circle0, i, j);
			s = FilterUtils::Multiply(s, y0, 0.2);

			// border
			CvScalar z = cvGet2D(image_border, i, j);
			s = FilterUtils::Multiply(s, z);

			cvSet2D(output_image, i, j, s);
		}
	}
	return ERROR_OK;
}

const uint8_t EffectFilter07::kRGBMap[][256] = 
{
	{25,25,25,26,26,27,27,28,28,28,29,29,30,30,31,31,32,32,33,34,35,35,36,37,38,38,39,40,41,41,42,43,44,44,45,46,47,47,48,49,50,50,51,52,53,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,78,79,81,82,83,85,86,87,89,90,91,93,94,95,96,98,99,100,102,103,104,106,107,108,110,111,112,114,115,116,118,119,120,122,123,125,126,127,129,130,131,133,134,136,137,138,139,140,141,143,144,145,146,147,149,150,151,152,153,155,156,157,158,160,161,162,163,165,166,167,168,170,171,172,173,175,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,190,191,192,193,194,194,195,196,197,198,198,199,200,201,202,203,203,204,205,205,206,207,207,208,209,209,210,211,211,212,213,214,214,215,215,216,217,217,218,219,219,220,220,221,222,222,223,224,224,224,225,225,226,226,227,227,227,228,228,229,229,230,230,231,231,231,232,232,233,233,234,234,234,235,235,236,236,237,237,238,238,238,239,239,240,240,241,241,241,242,242,243,243,244,244},
	{12,12,13,13,14,14,15,15,16,17,17,18,18,19,19,20,21,21,22,22,23,24,24,25,26,26,27,27,28,29,29,30,31,31,32,33,34,35,36,37,38,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,62,63,65,66,68,69,71,72,74,75,77,78,80,81,83,84,86,87,89,90,92,93,95,96,98,100,101,103,104,106,107,109,111,112,114,116,118,120,122,124,126,127,129,131,133,135,137,139,141,142,143,145,146,147,149,150,152,153,154,156,157,158,160,161,163,164,165,167,168,170,171,173,174,175,177,178,180,181,183,184,186,186,187,188,189,190,191,192,193,193,194,195,196,197,198,199,200,200,201,202,203,204,204,205,206,207,208,208,209,210,211,212,213,213,214,214,215,215,216,216,217,218,218,219,219,220,220,221,222,222,223,223,224,224,225,225,226,227,227,228,228,229,229,230,231,231,231,232,232,233,233,234,234,234,235,235,236,236,237,237,238,238,238,238,239,239,239,240,240,240,241,241,241,242,242,242,243,243,243,243,244,244,244,245,245,245,246,246,246,247,247,247},
	{6,6,6,7,7,8,8,9,9,9,10,10,11,11,12,12,13,13,14,14,15,16,16,17,18,18,19,19,20,21,21,22,23,23,24,25,26,27,27,28,29,30,31,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,56,57,58,60,61,63,64,65,67,68,69,71,72,74,75,77,78,80,82,83,85,87,88,90,91,93,95,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,133,135,136,138,140,141,143,145,146,148,149,151,153,154,156,158,159,161,162,164,165,167,168,170,172,173,175,176,178,179,181,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,199,200,201,202,203,203,204,205,206,207,207,208,209,210,211,212,212,213,214,214,215,216,216,217,218,218,219,220,220,221,222,223,223,224,224,225,225,226,226,227,228,228,229,229,230,230,231,232,232,232,233,233,234,234,235,235,235,236,236,237,237,238,238,239,239,239,240,240,240,241,241,242,242,242,243,243,243,244,244,245,245,245,246,246,246,247,247,248,248,248,249,249,249,250,250}
};
const char * EffectFilter07::kCircleImagePath1 = "data/circle07_1.png";
const char * EffectFilter07::kCircleImagePath0 = "data/circle07_0.png";
const char * EffectFilter07::kBorderImagePath = "data/border07.png";
const char * EffectFilter07::kGrainImagePath = "data/grain07.png";

/*------------- Filter 08 -------------*/
EffectFilter08::EffectFilter08() : BaseEffectFilter("Hefe", "1.0")
{
	image_border = cvLoadImage(kBorderImagePath);
	image_grain = cvLoadImage(kGrainImagePath);
	image_circle = cvLoadImage(kCircleImagePath);
}

EffectFilter08::~EffectFilter08()
{
	cvReleaseImage(&image_border);
	cvReleaseImage(&image_grain);
	cvReleaseImage(&image_circle);
}

FilterErrorCode EffectFilter08::Initialize()
{
	return ERROR_OK;
}

FilterErrorCode EffectFilter08::MakeEffect(
		const IplImage * input_image,
		IplImage * &output_image)
{
	output_image = cvCloneImage(input_image);
	for (int i = 0; i < output_image->height; i++)
	{
		for (int j = 0; j < output_image->width; j++)
		{
			CvScalar s = cvGet2D(output_image, i, j);

			// Color Map
			for (int k = 0; k < 3; k++)
			{
				s.val[k] = kRGBMap[k][int(s.val[k])];
			}

			// Grain
			CvScalar x = cvGet2D(image_grain, i, j);
			s = FilterUtils::Overlay(s, x, 0.5);

			// Circle
			CvScalar y0 = cvGet2D(image_circle, i, j);
			s = FilterUtils::Multiply(s, y0, 1);

			// border
			CvScalar z = cvGet2D(image_border, i, j);
			s = FilterUtils::Multiply(s, z);

			cvSet2D(output_image, i, j, s);
		}
	}
	return ERROR_OK;
}

const uint8_t EffectFilter08::kRGBMap[][256] = 
{
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,5,5,6,7,7,8,9,9,10,10,11,12,12,13,14,14,15,16,17,18,19,20,21,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,37,38,39,40,41,42,43,44,46,47,49,50,52,53,55,56,58,60,61,63,64,66,67,69,71,72,74,76,78,80,81,83,85,87,89,90,92,94,96,98,100,101,103,105,107,109,110,112,114,116,118,119,121,123,125,127,129,130,132,134,136,138,140,142,144,145,147,149,151,153,155,157,159,160,162,164,166,168,169,171,173,175,177,178,180,182,184,186,188,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,203,203,203,204,204,204,205,205,205,206,206,206,207,207,207,208,208,208,209,209,210,210,211,211,211,212,212,213,213,214,214,215,215,215,215,216,216,216,217,217,217,218,218,218,219,219,219,220,220,220,221,221,222,222,223,223,223,224,224,225,225,226,226,227,227,228,228,229,229,230,230,231,231,232,232,233,233,234,234},
	{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,3,3,4,4,4,5,5,6,6,7,7,8,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,28,29,30,32,33,34,36,37,38,40,41,42,44,45,47,49,51,53,55,57,59,60,62,64,66,68,70,72,74,76,78,80,82,84,87,89,91,93,95,98,100,102,104,106,109,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,141,143,145,147,149,151,153,155,157,159,161,163,165,167,169,171,172,174,175,177,178,180,181,183,185,186,188,189,191,192,194,196,196,197,198,199,200,201,202,203,203,204,205,206,207,208,209,210,210,211,211,212,212,213,213,214,215,215,216,216,217,217,218,219,219,219,220,220,221,221,222,222,222,223,223,224,224,225,225,226,226,227,227,228,228,229,229,230,230,231,231,232,232,233,233,234,234,234,235,235,236,236,237,237,237,238,238,239,239,240,240,241,241,242,242,243,243,244,244,245,246,246,247,247,248,248,249,250,250,250,250,251,251,251,252,252,252,253,253,253,254,254,254},
	{35,35,35,35,35,35,35,35,34,34,34,34,34,34,34,34,33,33,34,35,35,36,37,37,38,39,39,40,41,41,42,43,44,45,47,48,50,51,53,54,56,58,59,61,62,64,65,67,69,70,72,74,76,77,79,81,83,84,86,88,90,91,93,95,97,98,100,102,104,105,107,109,111,112,114,116,118,119,121,123,125,126,128,129,131,132,134,135,137,139,140,142,143,145,146,148,150,151,153,154,156,157,159,160,162,164,165,167,168,170,171,173,175,176,177,178,179,180,181,182,184,185,186,187,188,189,190,191,193,193,194,195,195,196,197,197,198,199,199,200,201,201,202,203,204,204,205,206,207,208,208,209,210,211,212,212,213,214,215,216,217,217,218,218,219,219,220,220,221,221,222,222,223,223,224,224,225,225,225,225,226,226,226,227,227,227,228,228,228,229,229,229,230,230,231,231,232,232,233,233,234,234,235,235,236,236,237,237,238,238,238,239,239,239,240,240,241,241,241,242,242,242,243,243,244,244,244,245,245,246,246,247,247,247,248,248,249,249,250,250,251,251,251,251,252,252,252,252,253,253,253,253,254,254,254,254}
};
const char * EffectFilter08::kCircleImagePath = "data/circle08.png";
const char * EffectFilter08::kBorderImagePath = "data/border08.png";
const char * EffectFilter08::kGrainImagePath = "data/grain08.png";

/*------------- Filter 09 -------------*/
EffectFilter09::EffectFilter09() : BaseEffectFilter("Apollo", "1.0")
{
	image_border = cvLoadImage(kBorderImagePath);
	image_grain = cvLoadImage(kGrainImagePath);
	image_circle0 = cvLoadImage(kCircleImagePath0);
	image_circle1 = cvLoadImage(kCircleImagePath1);
}

EffectFilter09::~EffectFilter09()
{
	cvReleaseImage(&image_border);
	cvReleaseImage(&image_grain);
	cvReleaseImage(&image_circle0);
	cvReleaseImage(&image_circle1);
}

FilterErrorCode EffectFilter09::Initialize()
{
	return ERROR_OK;
}

FilterErrorCode EffectFilter09::MakeEffect(
		const IplImage * input_image,
		IplImage * &output_image)
{

	output_image = cvCloneImage(input_image);
	for (int i = 0; i < output_image->height; i++)
	{
		for (int j = 0; j < output_image->width; j++)
		{
			CvScalar s = cvGet2D(output_image, i, j);

			// Color Map
			for (int k = 0; k < 3; k++)
			{
				s.val[k] = kRGBMap[k][int(s.val[k])];
			}

			// Grain
			CvScalar x = cvGet2D(image_grain, i, j);
			s = FilterUtils::Overlay(s, x, 1);

			// Circle
			CvScalar y1 = cvGet2D(image_circle1, i, j);
			s = FilterUtils::Overlay(s, y1, 1);
			CvScalar y0 = cvGet2D(image_circle0, i, j);
			s = FilterUtils::Multiply(s, y0, 0.5);

			// border
			CvScalar z = cvGet2D(image_border, i, j);
			s = FilterUtils::Lighten(s, z);

			cvSet2D(output_image, i, j, s);
		}
	}
	return ERROR_OK;
}

const uint8_t EffectFilter09::kRGBMap[][256] = 
{
	{0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,19,21,22,24,25,27,28,30,31,33,34,36,37,39,40,41,42,44,45,46,47,49,50,51,52,54,55,56,57,59,60,62,63,65,67,68,70,72,73,75,76,78,80,81,83,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,106,107,108,110,111,112,114,115,116,118,119,120,122,123,124,125,126,127,128,129,131,132,133,134,135,136,137,138,140,141,142,144,145,146,148,149,151,152,153,155,156,157,159,160,162,163,165,166,168,170,171,173,175,176,178,179,181,183,184,186,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,205,205,205,205,206,206,206,207,207,207,208,208,208,209,209,209,210,210,210,210,211,211,211,212,212,212,213,213,213,214,214,214,215,215,215,216,216,217,217,218,218,218,219,219,220,220,221,221,222,222,222,223,223,224,224,225,225,225,226,226,227,227,228,228,229,229,229,230,230,231,231,232,232,232,233,233,234,234,235,235,236,236,237,237,238,238,239,239,240,241,241,242,242,243,243,244},
	{22,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,43,44,46,47,49,50,52,53,55,56,58,59,61,62,63,64,66,67,68,70,71,72,74,75,76,78,79,80,82,83,85,86,88,89,91,92,94,96,97,99,100,102,103,105,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,127,128,129,131,132,134,135,136,138,139,140,142,143,145,146,147,148,149,150,151,152,154,155,156,157,158,159,160,161,163,164,165,167,168,169,171,172,174,175,176,178,179,180,182,183,185,186,187,188,189,190,192,193,194,195,196,198,199,200,201,202,204,204,205,206,206,207,208,208,209,210,210,211,212,212,213,214,215,215,215,215,216,216,216,217,217,217,218,218,218,219,219,219,220,220,220,220,221,221,221,222,222,222,223,223,223,224,224,224,225,225,225,226,226,227,227,228,228,228,229,229,230,230,231,231,232,232,232,233,233,234,234,235,235,235,236,236,237,237,238,238,239,239,239,240,240,241,241,242,242,242,243,243,244,244,245,245,246,246,247,247,248,248,249,249,250,251,251,252,252,253,253,254},
	{38,38,39,40,40,41,42,42,43,44,44,45,46,46,47,48,49,50,51,52,54,55,56,58,59,60,62,63,64,66,67,68,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,87,88,89,90,92,93,94,95,97,98,99,100,102,103,104,105,107,107,108,109,110,111,112,113,114,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,171,172,173,175,176,177,179,180,182,183,184,186,187,188,190,191,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,210,210,210,210,211,211,211,211,212,212,212,212,213,213,213,213,214,214,214,214,215,215,215,215,216,216,216,216,217,217,217,217,218,218,218,219,219,219,220,220,221,221,221,222,222,222,223,223,224,224,224,225,225,225,226,226,227,227,227,228,228,228,229,229,230,230,230,231,231,231,232,232,233,233,233,234,234,234,235,235,236,236,236,237,237,237,238,238,239,239,239,240,240,240,241,241}
};
const char * EffectFilter09::kCircleImagePath0 = "data/circle09_0.png";
const char * EffectFilter09::kCircleImagePath1 = "data/circle09_1.png";
const char * EffectFilter09::kBorderImagePath = "data/border09.png";
const char * EffectFilter09::kGrainImagePath = "data/grain09.png";

/*------------- Filter 10 -------------*/
EffectFilter10::EffectFilter10() : BaseEffectFilter("Poprocket", "1.0")
{
	image_border = cvLoadImage(kBorderImagePath);
	image_grain = cvLoadImage(kGrainImagePath);
	image_circle0 = cvLoadImage(kCircleImagePath0);
	image_circle1 = cvLoadImage(kCircleImagePath1);
	image_background = cvLoadImage(kBackgroundImagePath);
}

EffectFilter10::~EffectFilter10()
{
	cvReleaseImage(&image_border);
	cvReleaseImage(&image_grain);
	cvReleaseImage(&image_circle0);
	cvReleaseImage(&image_circle1);
	cvReleaseImage(&image_background);
}

FilterErrorCode EffectFilter10::Initialize()
{
	return ERROR_OK;
}

FilterErrorCode EffectFilter10::MakeEffect(
		const IplImage * input_image,
		IplImage * &output_image)
{

	output_image = cvCloneImage(input_image);
	for (int i = 0; i < output_image->height; i++)
	{
		for (int j = 0; j < output_image->width; j++)
		{
			CvScalar s = cvGet2D(output_image, i, j);

			// Background
			CvScalar x = cvGet2D(image_background, i, j);
			s = FilterUtils::Screen(s, x, 0.75);
			
			// Grain
			CvScalar z = cvGet2D(image_grain, i, j);
			s = FilterUtils::Overlay(s, z, 0.75);

			// Circle
			CvScalar y1 = cvGet2D(image_circle1, i, j);
			s = FilterUtils::Overlay(s, y1, 1);
			CvScalar y0 = cvGet2D(image_circle0, i, j);
			s = FilterUtils::Multiply(s, y0, 0.5);
			
			// Border
			CvScalar u = cvGet2D(image_border, i, j);
			s = FilterUtils::Multiply(s, u, 1);

			cvSet2D(output_image, i, j, s);
		}
	}
	return ERROR_OK;
}

const char * EffectFilter10::kBorderImagePath = "data/border10.png";
const char * EffectFilter10::kBackgroundImagePath = "data/background10.png";
const char * EffectFilter10::kCircleImagePath0 = "data/circle10_0.png";
const char * EffectFilter10::kCircleImagePath1 = "data/circle10_1.png";
const char * EffectFilter10::kGrainImagePath = "data/grain10.png";

/*------------- Filter 11 -------------*/
EffectFilter11::EffectFilter11() : BaseEffectFilter("Nashville", "1.0")
{
	image_border = cvLoadImage(kBorderImagePath);
}

EffectFilter11::~EffectFilter11()
{
	cvReleaseImage(&image_border);
}

FilterErrorCode EffectFilter11::Initialize()
{
	return ERROR_OK;
}

FilterErrorCode EffectFilter11::MakeEffect(
		const IplImage * input_image,
		IplImage * &output_image)
{
	output_image = cvCloneImage(input_image);
	for (int i = 0; i < output_image->height; i++)
	{
		for (int j = 0; j < output_image->width; j++)
		{
			CvScalar s = cvGet2D(output_image, i, j);

			// Color Map
			for (int k = 0; k < 3; k++)
			{
				s.val[k] = kRGBMap[k][int(s.val[k])];
			}

			// border
			CvScalar y = cvGet2D(image_border, i, j);
			if (y.val[0] == 255 && y.val[1] == 255 && y.val[2] == 255)
			{
				s = s;
			}
			else
			{
				s = y;
			}

			cvSet2D(output_image, i, j, s);
		}
	}
	return ERROR_OK;
}

const uint8_t EffectFilter11::kRGBMap[][256] = 
{
	{97,97,97,97,98,98,98,99,99,99,100,100,100,101,101,101,102,102,102,103,103,104,104,105,105,105,106,106,107,107,108,108,109,109,110,110,111,111,112,112,113,113,114,114,115,115,116,116,117,117,118,118,119,119,120,120,121,122,122,123,123,124,124,125,126,126,127,127,128,128,129,129,130,130,131,131,132,132,133,133,134,134,134,135,135,136,136,137,137,137,138,138,139,139,140,140,141,141,141,141,142,142,142,143,143,143,144,144,144,145,145,145,146,146,147,147,148,148,149,149,150,150,151,151,152,152,153,153,154,154,154,154,154,154,155,155,155,155,155,156,156,156,156,156,157,157,157,158,158,158,159,159,160,160,160,161,161,161,162,162,163,163,163,163,163,163,164,164,164,164,164,165,165,165,165,165,166,166,166,166,166,166,167,167,167,167,167,168,168,168,168,168,169,169,169,169,169,169,169,169,170,170,170,170,170,170,170,170,171,171,171,171,171,171,171,171,172,172,172,172,172,172,172,172,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173},
	{37,37,37,38,38,39,39,40,40,40,41,41,42,42,43,43,44,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,79,81,82,83,85,86,87,89,90,91,93,94,95,97,98,99,100,101,102,104,105,106,107,108,110,111,112,113,114,116,117,118,119,121,122,123,125,126,127,129,130,131,133,134,135,137,138,139,140,141,142,143,144,146,147,148,149,150,151,152,153,155,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,170,171,172,173,173,174,175,176,176,177,178,179,179,180,181,182,182,183,184,185,185,186,187,188,188,189,190,191,191,192,193,194,194,194,195,195,196,196,197,197,197,198,198,199,199,200,200,201,201,202,202,203,203,204,204,205,205,206,206,207,207,208,208,209,209,209,209,210,210,210,211,211,211,212,212,212,213,213,213,214,214,214,214,214,214,215,215,215,215,215,216,216,216,216,216,217,217,217,217,217,217,218,218,218,218,218,219,219,219,219,219,220,220,220,220,220,220,221,221,221,221,221,222,222,222,222,222},
	{57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,59,60,60,61,62,63,63,64,65,66,66,67,68,69,70,72,74,76,78,80,82,84,85,87,89,91,93,95,97,99,101,103,105,107,109,112,114,116,118,120,123,125,127,129,131,134,135,137,139,141,143,145,147,149,151,153,155,157,159,161,163,165,166,167,169,170,172,173,175,176,177,179,180,182,183,185,186,188,189,190,191,192,193,195,196,197,198,199,201,202,203,204,205,207,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,222,223,224,225,225,226,227,228,228,229,230,231,231,232,233,234,234,235,235,236,236,237,237,238,238,239,239,240,240,241,241,242,242,242,243,243,243,244,244,245,245,245,246,246,246,247,247,248,248,248,248,248,248,249,249,249,249,249,250,250,250,250,250,251,251,251,251,251,251,251,251,252,252,252,252,252,252,252,252,253,253,253,253,253,253,253,253,254,254,254,254,254,254,254,254}
};

const char * EffectFilter11::kBorderImagePath = "data/border11.png";

/*------------- Filter 12 -------------*/
EffectFilter12::EffectFilter12() : BaseEffectFilter("Gotham", "1.0")
{
	image_border = cvLoadImage(kBorderImagePath);
}

EffectFilter12::~EffectFilter12()
{
	cvReleaseImage(&image_border);
}

FilterErrorCode EffectFilter12::Initialize()
{
	return ERROR_OK;
}

FilterErrorCode EffectFilter12::MakeEffect(
		const IplImage * input_image,
		IplImage * &output_image)
{
	output_image = cvCloneImage(input_image);
	for (int i = 0; i < output_image->height; i++)
	{
		for (int j = 0; j < output_image->width; j++)
		{
			CvScalar s = cvGet2D(output_image, i, j);

			// Color Map
			for (int k = 0; k < 3; k++)
			{
				s.val[k] = kRGBMap[k][int(s.val[2])];
			}

			// border
			CvScalar y = cvGet2D(image_border, i, j);
			s = FilterUtils::Multiply(s, y);

			cvSet2D(output_image, i, j, s);
		}
	}
	return ERROR_OK;
}

const uint8_t EffectFilter12::kRGBMap[][256] = 
{
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10,11,11,12,12,12,13,13,13,14,14,15,15,16,17,17,18,19,19,20,21,21,22,23,23,24,25,26,26,27,28,29,30,31,32,33,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,57,58,59,60,62,63,64,65,67,68,69,70,72,73,74,75,77,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,132,133,134,135,137,138,139,140,141,143,144,145,146,147,148,150,151,152,153,154,156,157,158,159,160,162,163,165,167,168,170,172,173,175,177,178,180,182,183,185,187,189,191,193,195,197,199,201,203,205,207,209,211,213,215,217,219,221,223,225,227,229,231,233,235,238,240,242,244,246,248,250,252},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,9,9,9,10,10,10,11,11,11,12,12,13,13,14,14,15,15,16,17,17,18,18,19,19,20,21,21,22,22,23,24,24,25,26,26,27,27,28,29,29,30,31,31,32,33,34,35,35,36,37,38,39,39,40,41,42,43,44,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,66,67,68,69,70,72,73,74,75,76,78,79,80,82,83,84,86,87,89,90,91,93,94,95,97,98,100,101,103,104,106,107,109,110,112,113,115,116,118,119,121,122,124,125,127,129,131,132,134,136,138,139,141,143,145,146,148,150,152,153,155,157,159,161,163,165,167,169,171,173,175,177,179,181,183,184,185,187,188,189,191,192,194,195,196,198,199,200,202,203,205,206,208,209,211,212,214,215,217,219,220,222,223,225,226,228,230,231,233,234,236,237,239,240,242,244,245,247,248,250,251,253},
	{0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,10,10,10,11,11,11,12,12,13,13,13,14,14,15,15,16,16,16,17,17,18,18,19,19,20,20,20,21,21,22,22,23,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,36,36,37,37,38,38,39,40,40,41,41,42,42,43,44,44,45,45,46,46,47,47,48,49,49,50,50,51,51,52,53,54,55,56,57,58,60,61,62,63,64,66,67,68,69,70,72,73,74,76,77,79,80,82,83,84,86,87,89,90,92,93,95,96,98,99,101,102,104,105,107,109,110,112,113,115,116,118,120,121,123,125,127,129,131,133,135,137,139,141,143,145,147,149,151,153,155,157,159,161,163,165,168,170,172,174,176,178,180,182,185,186,187,189,190,191,193,194,196,197,198,200,201,202,204,205,207,208,209,211,212,214,215,217,218,219,221,222,224,225,227,228,230,231,233,234,236,237,239,240,242,244,245,247,248,250,251,253}
};

const char * EffectFilter12::kBorderImagePath = "data/border12.png";

/*------------- Filter 13 -------------*/
EffectFilter13::EffectFilter13() : BaseEffectFilter("1977", "1.0")
{
	image_border = cvLoadImage(kBorderImagePath);
	image_background = cvLoadImage(kBackgroundImagePath);
}

EffectFilter13::~EffectFilter13()
{
	cvReleaseImage(&image_border);
	cvReleaseImage(&image_background);
}

FilterErrorCode EffectFilter13::Initialize()
{
	return ERROR_OK;
}

FilterErrorCode EffectFilter13::MakeEffect(
		const IplImage * input_image,
		IplImage * &output_image)
{
	output_image = cvCloneImage(input_image);
	for (int i = 0; i < output_image->height; i++)
	{
		for (int j = 0; j < output_image->width; j++)
		{
			CvScalar s = cvGet2D(output_image, i, j);

			// Color Map
			for (int k = 0; k < 3; k++)
			{
				s.val[k] = kRGBMap[k][int(s.val[k])];
			}

			// background
			CvScalar x = cvGet2D(image_background, i, j);
			s = FilterUtils::Screen(s, x, 0.5);

			// border
			CvScalar y = cvGet2D(image_border, i, j);
			s = FilterUtils::Lighten(s, y);

			cvSet2D(output_image, i, j, s);
		}
	}
	return ERROR_OK;
}

const uint8_t EffectFilter13::kRGBMap[][256] = 
{
	{65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,87,88,89,90,92,93,94,95,97,98,99,100,102,103,105,107,109,111,113,115,117,119,121,123,125,127,129,131,133,133,134,134,135,135,136,136,137,137,138,138,139,139,140,140,141,142,143,144,145,146,148,149,150,151,152,154,155,156,157,158,160,161,162,163,165,166,167,168,170,171,172,173,175,176,177,178,180,181,182,183,184,185,186,187,189,190,191,192,193,194,195,196,198,198,199,200,201,202,203,204,205,205,206,207,208,209,210,211,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213},
	{58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,79,80,81,82,83,85,86,87,88,89,90,91,92,94,95,97,99,100,102,104,105,107,109,110,112,114,115,117,119,121,121,121,122,122,122,123,123,124,124,124,125,125,125,126,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,153,154,155,156,157,158,159,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240},
	{82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,84,85,86,86,87,88,89,89,90,91,92,92,93,94,95,96,97,98,99,100,101,102,104,105,106,107,108,109,110,111,113,114,115,116,117,118,119,120,122,123,124,125,126,127,128,129,131,132,134,136,137,139,141,142,144,146,147,149,151,152,154,156,158,158,158,159,159,159,160,160,161,161,161,162,162,162,163,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,181,182,183,184,185,186,187,188,190,191,192,193,194,195,196,197,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,216,216,217,217,218,218,219,219,220,221,221,222,222,223,223,224,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225}
};

const char * EffectFilter13::kBorderImagePath = "data/border13.png";
const char * EffectFilter13::kBackgroundImagePath = "data/background13.png";

/*------------- Filter 14 -------------*/
EffectFilter14::EffectFilter14() : BaseEffectFilter("Lord Kelvin", "1.0")
{
	image_border = cvLoadImage(kBorderImagePath);
}

EffectFilter14::~EffectFilter14()
{
	cvReleaseImage(&image_border);
}

FilterErrorCode EffectFilter14::Initialize()
{
	return ERROR_OK;
}

FilterErrorCode EffectFilter14::MakeEffect(
		const IplImage * input_image,
		IplImage * &output_image)
{
	output_image = cvCloneImage(input_image);
	for (int i = 0; i < output_image->height; i++)
	{
		for (int j = 0; j < output_image->width; j++)
		{
			CvScalar s = cvGet2D(output_image, i, j);
			for (int k = 0; k < 3; k++)
			{
				s.val[k] = kRGBMap[k][int(s.val[k])];
			}
			CvScalar t = cvGet2D(image_border, i, j);
			CvScalar v = FilterUtils::Screen(s, t);
			cvSet2D(output_image, i, j, v);
		}
	}
	return ERROR_OK;
}

const uint8_t EffectFilter14::kRGBMap[][256] = 
{
	{69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,70,70,71,71,72,72,72,73,73,74,74,75,75,76,76,77,77,78,78,79,79,80,80,81,81,82,82,83,83,84,84,85,85,86,86,87,87,88,88,89,89,90,90,91,91,92,92,92,93,93,93,94,94,95,95,95,96,96,96,97,97,98,98,98,99,99,100,100,101,101,101,102,102,103,103,104,104,105,105,105,105,106,106,106,107,107,107,108,108,108,109,109,109,110,110,110,110,111,111,111,111,112,112,112,112,113,113,113,113,114,114,114,114,115,115,115,115,116,116,116,116,117,117,117,117,118,118,118,118,118,118,119,119,119,119,119,120,120,120,120,120,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122},
	{36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,37,38,39,40,41,42,43,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,90,91,93,94,95,96,97,98,99,100,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,119,120,121,122,123,124,125,126,128,129,130,131,132,133,134,135,137,137,138,139,140,141,142,143,144,144,145,146,147,148,149,150,151,151,152,153,154,154,155,156,157,157,158,159,160,160,161,162,163,163,164,164,165,166,166,167,168,168,169,169,170,171,171,172,173,173,173,174,174,175,175,176,176,176,177,177,178,178,179,179,180,180,180,181,181,181,182,182,183,183,183,184,184,184,185,185,186,186,186,186,187,187,187,187,188,188,188,188,189,189,189,189,190,190,190,190,190,190,190,190,191,191,191,191,191,191,191,191,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192},
	{43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,64,65,67,68,70,71,72,74,75,76,78,79,81,82,83,85,86,88,89,91,92,93,95,96,98,99,101,102,104,105,107,109,111,112,114,116,118,119,121,123,125,126,128,130,132,133,135,136,138,139,141,142,144,145,147,148,150,151,153,154,156,157,158,160,161,162,164,165,167,168,169,171,172,173,175,176,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,195,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,210,211,212,212,213,214,214,215,216,216,217,218,218,219,220,221,221,222,222,223,224,224,225,226,226,227,227,228,229,229,230,231,231,231,232,232,232,233,233,234,234,234,235,235,235,236,236,237,237,237,238,238,238,239,239,240,240,240,241,241,241,242,242,243,243,243,243,244,244,244,244,245,245,245,245,246,246,246,246,247,247,247,247,247,247,248,248,248,248,248,249,249,249,249,249,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,251,251,251,251,252,252,252,252,253,253,253,253,254,254,254,254}
};

const char * EffectFilter14::kBorderImagePath = "data/border14.png";

}

